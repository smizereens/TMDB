import logging
import html  # Import the html module for escaping
import asyncio # Import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto
from telegram.constants import ParseMode
from telegram.error import BadRequest, RetryAfter # Import errors
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
)
import tmdb_api # Import our API module

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
# –ö—ç—à –¥–ª—è –∂–∞–Ω—Ä–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
GENRES_CACHE = {}
API_CONFIG_CACHE = {}
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /discover
(ASK_GENRE, ASK_YEAR, ASK_RATING, SHOW_DISCOVERY_RESULTS) = range(4) # –î–ª—è /discover
ASK_SEARCH_QUERY = range(4, 5) # –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ

# –ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
DISCOVERY_CRITERIA = 'discovery_criteria'
PAGINATED_RESULTS = 'paginated_results'
CURRENT_INDEX = 'current_index'

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
BTN_SEARCH = "üîç –ü–æ–∏—Å–∫"
BTN_DISCOVER = "üí° –ü–æ–¥–æ–±—Ä–∞—Ç—å" # –ò–∑–º–µ–Ω–µ–Ω–æ —Å —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã /discover
BTN_POPULAR = "‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ"
BTN_TOP_RATED = "üèÜ –¢–æ–ø –†–µ–π—Ç–∏–Ω–≥"
BTN_UPCOMING = "üìÖ –°–∫–æ—Ä–æ"
BTN_HELP = "‚ùì –ü–æ–º–æ—â—å"

MAIN_KEYBOARD = [
    [BTN_SEARCH, BTN_DISCOVER],
    [BTN_POPULAR, BTN_TOP_RATED, BTN_UPCOMING],
    [BTN_HELP]
]
MAIN_REPLY_MARKUP = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def ensure_api_config_cached():
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –ø–æ–ª—É—á–µ–Ω–∞ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞."""
    global API_CONFIG_CACHE
    if not API_CONFIG_CACHE or 'images' not in API_CONFIG_CACHE:
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞. –ó–∞–ø—Ä–∞—à–∏–≤–∞—é...")
        API_CONFIG_CACHE = tmdb_api.get_api_config()
        if not API_CONFIG_CACHE or 'images' not in API_CONFIG_CACHE:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API.")
            API_CONFIG_CACHE = {} # –°–±—Ä–æ—Å –∫—ç—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return False
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞.")
    return True

async def ensure_genres_cached():
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã."""
    global GENRES_CACHE
    if not GENRES_CACHE:
        logger.info("–ñ–∞–Ω—Ä—ã –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–ø—Ä–∞—à–∏–≤–∞—é...")
        genres_data = tmdb_api.get_genres()
        if genres_data and 'genres' in genres_data:
            GENRES_CACHE = {genre['name'].lower(): genre['id'] for genre in genres_data['genres']}
            logger.info("–ñ–∞–Ω—Ä—ã —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã.")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∂–∞–Ω—Ä—ã.")
            GENRES_CACHE = {} # –°–±—Ä–æ—Å –∫—ç—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return False
    return True

def format_movie_details(movie_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –≤ —á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML."""
    if not movie_data:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ.", None

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –∏–∑ –ø–æ–ª–µ–π API
    title = html.escape(movie_data.get('title', 'N/A'))
    original_title = html.escape(movie_data.get('original_title', ''))
    overview = html.escape(movie_data.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.'))
    release_date = movie_data.get('release_date', 'N/A') # –î–∞—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞
    rating = movie_data.get('vote_average', 0)
    vote_count = movie_data.get('vote_count', 0)
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∞–Ω—Ä–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    genres_list = [html.escape(g['name']) for g in movie_data.get('genres', [])]
    genres = ', '.join(genres_list)
    runtime = movie_data.get('runtime', 0) # –≤ –º–∏–Ω—É—Ç–∞—Ö

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML —Ç–µ–≥–æ–≤
    message = f"üé¨ <b>{title}</b>"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ *–ø–µ—Ä–µ–¥* —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if movie_data.get('title', '').lower() != movie_data.get('original_title', '').lower() and original_title:
        message += f" ({original_title})" # –£–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
    message += f"\n\nüóìÔ∏è –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {release_date}"
    if genres:
        message += f"\nüé≠ –ñ–∞–Ω—Ä—ã: {genres}" # –£–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
    if runtime:
        message += f"\n‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {runtime} –º–∏–Ω."
    message += f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.1f}/10 ({vote_count} –≥–æ–ª–æ—Å–æ–≤)"
    message += f"\n\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{overview}" # –£–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ

    # –î–æ–±–∞–≤–ª—è–µ–º URL –ø–æ—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    poster_url = None
    if API_CONFIG_CACHE and 'images' in API_CONFIG_CACHE and movie_data.get('poster_path'):
        base_url = API_CONFIG_CACHE['images'].get('secure_base_url', '')
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å—Ç–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, w500)
        poster_size = 'w500' # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é w500
        poster_sizes = API_CONFIG_CACHE['images'].get('poster_sizes', [])
        if 'w500' in poster_sizes:
             poster_size = 'w500'
        elif len(poster_sizes) > 1:
             # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ w500 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
             poster_size = poster_sizes[-2] if len(poster_sizes) >= 2 else poster_sizes[-1]
        elif poster_sizes:
             poster_size = poster_sizes[-1] # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        else:
             poster_size = 'original' # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

        poster_path = movie_data['poster_path']
        if base_url and poster_path:
            poster_url = f"{base_url}{poster_size}{poster_path}"
            # logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω URL –ø–æ—Å—Ç–µ—Ä–∞: {poster_url}") # –£–º–µ–Ω—å—à–∞–µ–º —à—É–º –≤ –ª–æ–≥–∞—Ö
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å URL –ø–æ—Å—Ç–µ—Ä–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç base_url –∏–ª–∏ poster_path).")

    return message, poster_url # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π URL –ø–æ—Å—Ç–µ—Ä–∞


async def display_movie_result(update: Update, context: ContextTypes.DEFAULT_TYPE, index: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å–º–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    results = context.user_data.get(PAGINATED_RESULTS, [])
    if not results or index < 0 or index >= len(results):
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å ({index}) –∏–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        reply_target = update.callback_query.message if update.callback_query else update.message
        if reply_target:
            await reply_target.reply_text("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return

    movie = results[index]
    message_text, poster_url = format_movie_details(movie)
    context.user_data[CURRENT_INDEX] = index

    # --- –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---
    keyboard = []
    row = []
    if index > 0:
        row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"prev_movie_{index - 1}"))
    if index < len(results) - 1:
        row.append(InlineKeyboardButton("–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"next_movie_{index + 1}"))
    if row:
        keyboard.append(row)
    inline_reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞ (inline –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–Ω—É—é –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    final_reply_markup = inline_reply_markup if update.callback_query else (inline_reply_markup if results else MAIN_REPLY_MARKUP)


    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    reply_target = update.callback_query.message if update.callback_query else update.message
    if not reply_target:
         logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
         return

    # --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ (Callbacks) ---
    if update.callback_query:
        current_message = update.callback_query.message
        has_current_photo = bool(current_message.photo)
        has_new_photo = bool(poster_url)

        try:
            # –°–ª—É—á–∞–π 1: –¢–∏–ø—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç (—Ñ–æ—Ç–æ->—Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç->—Ç–µ–∫—Å—Ç) - –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            if has_current_photo == has_new_photo:
                if has_new_photo: # –§–æ—Ç–æ -> –§–æ—Ç–æ
                     logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ {current_message.message_id} —Å —Ñ–æ—Ç–æ –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie.get('id')}")
                     await update.callback_query.edit_message_media(
                        media=InputMediaPhoto(media=poster_url, caption=message_text, parse_mode=ParseMode.HTML),
                        reply_markup=inline_reply_markup # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    )
                else: # –¢–µ–∫—Å—Ç -> –¢–µ–∫—Å—Ç
                    logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ {current_message.message_id} —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie.get('id')}")
                    await update.callback_query.edit_message_text(
                        text=message_text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=inline_reply_markup, # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        disable_web_page_preview=True
                    )
            # –°–ª—É—á–∞–π 2: –¢–∏–ø—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç (—Ñ–æ—Ç–æ->—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç->—Ñ–æ—Ç–æ) - –£–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
            else:
                logger.info(f"–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—Ñ–æ—Ç–æ: {has_current_photo} -> {has_new_photo}). –£–¥–∞–ª—è—é {current_message.message_id} –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–Ω–æ–≤–æ.")
                await current_message.delete()
                chat_id = current_message.chat_id
                if has_new_photo:
                    await context.bot.send_photo(chat_id=chat_id, photo=poster_url, caption=message_text, parse_mode=ParseMode.HTML, reply_markup=inline_reply_markup) # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                else:
                    await context.bot.send_message(chat_id=chat_id, text=message_text, parse_mode=ParseMode.HTML, reply_markup=inline_reply_markup, disable_web_page_preview=True) # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        except BadRequest as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É "message is not modified" –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥
            if "message is not modified" in str(e).lower():
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—é –æ—à–∏–±–∫—É.")
                try: await update.callback_query.answer() # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
                except Exception: pass
            else:
                logger.error(f"BadRequest –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie.get('id')}: {e}")
                try: await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
                except Exception: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ callback –Ω–µ —É–¥–∞–ª—Å—è
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie.get('id')}: {e}")
            try: await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
            except Exception: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ callback –Ω–µ —É–¥–∞–ª—Å—è

    # --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã (–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è) ---
    else:
        try:
            if poster_url:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie.get('id')}")
                await reply_target.reply_photo(photo=poster_url, caption=message_text, parse_mode=ParseMode.HTML, reply_markup=final_reply_markup)
            else:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie.get('id')}")
                await reply_target.reply_text(text=message_text, parse_mode=ParseMode.HTML, reply_markup=final_reply_markup, disable_web_page_preview=True)
        except RetryAfter as e:
             logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie.get('id')}: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {e.retry_after}—Å.")
             # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª–µ
             await reply_target.reply_text(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥.", reply_markup=MAIN_REPLY_MARKUP)
        except Exception as e:
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie.get('id')}: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.")
            try:
                # –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–µ–∑ HTML –¥–ª—è fallback'–∞
                plain_title = html.unescape(html.escape(movie.get('title', 'N/A'))) # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–µ –∏ —Ä–∞—Å–∫–æ–¥–∏—Ä—É–µ–º
                plain_original_title = html.unescape(html.escape(movie.get('original_title', '')))
                plain_overview = html.unescape(html.escape(movie.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')))
                plain_genres_list = [html.unescape(html.escape(g['name'])) for g in movie.get('genres', [])]
                plain_genres = ', '.join(plain_genres_list)
                plain_runtime = movie.get('runtime', 0)
                plain_rating = movie.get('vote_average', 0)
                plain_vote_count = movie.get('vote_count', 0)
                plain_release_date = movie.get('release_date', 'N/A')

                plain_text = f"üé¨ {plain_title}"
                if movie.get('title', '').lower() != movie.get('original_title', '').lower() and plain_original_title:
                     plain_text += f" ({plain_original_title})"
                plain_text += f"\n\nüóìÔ∏è –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {plain_release_date}"
                if plain_genres:
                     plain_text += f"\nüé≠ –ñ–∞–Ω—Ä—ã: {plain_genres}"
                if plain_runtime:
                     plain_text += f"\n‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {plain_runtime} –º–∏–Ω."
                plain_text += f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {plain_rating:.1f}/10 ({plain_vote_count} –≥–æ–ª–æ—Å–æ–≤)"
                plain_text += f"\n\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{plain_overview}"
                await reply_target.reply_text(plain_text, reply_markup=final_reply_markup, disable_web_page_preview=True)
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie.get('id')}: {e2}")


async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ 'next' –∏ 'previous' –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–∏–ª—å–º–æ–≤."""
    query = update.callback_query
    await query.answer() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {data}")

    try:
        action, new_index_str = data.split("_", 2)[1:] # –Ω–∞–ø—Ä–∏–º–µ—Ä, "next", "movie", "5" -> "movie", "5"
        new_index = int(new_index_str)
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö callback'–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ '{data}': {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try: await query.answer("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
        except Exception: pass
        return

    await display_movie_result(update, context, new_index)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help.",
        reply_markup=MAIN_REPLY_MARKUP
    )
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫—ç—à–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∂–∞–Ω—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await asyncio.gather(
        ensure_api_config_cached(),
        ensure_genres_cached()
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /help."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏
    help_text = """
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏:</b>
/start - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
/help –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ '‚ùì –ü–æ–º–æ—â—å' - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
–ö–Ω–æ–ø–∫–∞ 'üîç –ü–æ–∏—Å–∫' –∏–ª–∏ /search <code><–Ω–∞–∑–≤–∞–Ω–∏–µ></code> - –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
–ö–Ω–æ–ø–∫–∞ 'üí° –ü–æ–¥–æ–±—Ä–∞—Ç—å' –∏–ª–∏ /discover - –ü–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥–±–æ—Ä –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
–ö–Ω–æ–ø–∫–∞ '‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ' –∏–ª–∏ /popular - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã
–ö–Ω–æ–ø–∫–∞ 'üèÜ –¢–æ–ø –†–µ–π—Ç–∏–Ω–≥' –∏–ª–∏ /toprated - –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
–ö–Ω–æ–ø–∫–∞ 'üìÖ –°–∫–æ—Ä–æ' –∏–ª–∏ /upcoming - –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–æ—Ä–æ –≤—ã—Ö–æ–¥—è—â–∏–µ —Ñ–∏–ª—å–º—ã
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–ø–æ–∏—Å–∫ –∏–ª–∏ –ø–æ–¥–±–æ—Ä)
    """
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML, reply_markup=MAIN_REPLY_MARKUP)

# --- –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫/–∫–æ–º–∞–Ω–¥ ---

async def handle_search(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    api_results = tmdb_api.search_movies(query)

    # –ù–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ,
    # —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ù–∞—á–∞–ª–æ"
    if api_results and api_results.get('results'):
        context.user_data[PAGINATED_RESULTS] = api_results['results'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—ã—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await display_movie_result(update, context, 0) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    elif api_results is None:
         # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ API –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
         await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_REPLY_MARKUP)
    else:
         # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
        await update.message.reply_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=MAIN_REPLY_MARKUP)

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /search –Ω–∞–ø—Ä—è–º—É—é."""
    query = " ".join(context.args)
    if not query:
        example_command = html.escape("/search –ù–∞—á–∞–ª–æ")
        await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search.\n–ü—Ä–∏–º–µ—Ä: <code>{example_command}</code>", parse_mode=ParseMode.HTML, reply_markup=MAIN_REPLY_MARKUP)
        return
    await handle_search(update, context, query)


async def popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /popular –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏."""
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ.")
    api_results = tmdb_api.get_popular_movies()
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∑–∞—Ç–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await update.message.reply_text("<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã (–≥–æ–ª–æ—Å–æ–≤ > 1000):</b>", parse_mode=ParseMode.HTML, reply_markup=MAIN_REPLY_MARKUP)

    if api_results and api_results.get('results'):
         # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤ >= 1000 (—Ç.–∫. —ç–Ω–¥–ø–æ–∏–Ω—Ç API —ç—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
        filtered_results = [m for m in api_results['results'] if m.get('vote_count', 0) >= 1000]
        if filtered_results:
            context.user_data[PAGINATED_RESULTS] = filtered_results
            await display_movie_result(update, context, 0) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        else:
            await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ (>1000).", reply_markup=MAIN_REPLY_MARKUP)
    elif api_results is None:
         await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_REPLY_MARKUP)
    else:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.", reply_markup=MAIN_REPLY_MARKUP)


async def toprated_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /toprated –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏."""
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¢–æ–ø –†–µ–π—Ç–∏–Ω–≥.")
    api_results = tmdb_api.get_top_rated_movies() # –£–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ API
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∑–∞—Ç–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await update.message.reply_text("<b>–§–∏–ª—å–º—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º (–≥–æ–ª–æ—Å–æ–≤ > 1000):</b>", parse_mode=ParseMode.HTML, reply_markup=MAIN_REPLY_MARKUP)

    if api_results and api_results.get('results'):
        context.user_data[PAGINATED_RESULTS] = api_results['results']
        await display_movie_result(update, context, 0) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    elif api_results is None:
         await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_REPLY_MARKUP)
    else:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤.", reply_markup=MAIN_REPLY_MARKUP)


async def upcoming_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /upcoming –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏."""
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –°–∫–æ—Ä–æ.")
    api_results = tmdb_api.get_upcoming_movies()
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∑–∞—Ç–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await update.message.reply_text("<b>–°–∫–æ—Ä–æ –≤ –∫–∏–Ω–æ:</b>", parse_mode=ParseMode.HTML, reply_markup=MAIN_REPLY_MARKUP)

    if api_results and api_results.get('results'):
        # –°–∫–æ—Ä–æ –≤—ã—Ö–æ–¥—è—â–∏–µ —Ñ–∏–ª—å–º—ã —á–∞—Å—Ç–æ –∏–º–µ—é—Ç –º–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤, –ø–æ—ç—Ç–æ–º—É –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö
        context.user_data[PAGINATED_RESULTS] = api_results['results']
        await display_movie_result(update, context, 0) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    elif api_results is None:
         await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_REPLY_MARKUP)
    else:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∫–æ—Ä–æ –≤—ã—Ö–æ–¥—è—â–∏—Ö —Ñ–∏–ª—å–º–æ–≤.", reply_markup=MAIN_REPLY_MARKUP)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ (/discover) ---

# --- –î–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ ---

async def search_button_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å."""
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ü–æ–∏—Å–∫.")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=ReplyKeyboardRemove())
    return ASK_SEARCH_QUERY

async def search_query_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞."""
    query = update.message.text
    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.", reply_markup=MAIN_REPLY_MARKUP)
        return ConversationHandler.END # –ò–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–Ω–æ–≤–∞? –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã.

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞
    await handle_search(update, context, query)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_REPLY_MARKUP)
    return ConversationHandler.END


# --- –î–∏–∞–ª–æ–≥ –ø–æ–¥–±–æ—Ä–∞ (/discover –∏–ª–∏ –∫–Ω–æ–ø–∫–∞) ---

async def discover_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥–±–æ—Ä–∞ (–∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏)."""
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ü–æ–¥–æ–±—Ä–∞—Ç—å, –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞.")
    await ensure_genres_cached()
    if not GENRES_CACHE:
         await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_REPLY_MARKUP)
         return ConversationHandler.END

    context.user_data[DISCOVERY_CRITERIA] = {} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏
    keyboard = []
    row = []
    genres_sorted = sorted(GENRES_CACHE.keys())
    for i, genre_name in enumerate(genres_sorted):
        row.append(InlineKeyboardButton(genre_name.capitalize(), callback_data=f"genre_{GENRES_CACHE[genre_name]}"))
        if len(row) == 3 or i == len(genres_sorted) - 1: # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            keyboard.append(row)
            row = []
    keyboard.append([InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_genre")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º —Ñ–∏–ª—å–º! –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=reply_markup)
    return ASK_GENRE

async def ask_genre_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞ –∏–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    query = update.callback_query
    await query.answer()
    callback_data = query.data

    if callback_data == "skip_genre":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞.")
        await query.edit_message_text(text="–ñ–∞–Ω—Ä –ø—Ä–æ–ø—É—â–µ–Ω.")
    elif callback_data.startswith("genre_"):
        genre_id = callback_data.split("_")[1]
        context.user_data[DISCOVERY_CRITERIA]['with_genres'] = genre_id
        # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –∂–∞–Ω—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        genre_name = "–í—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä"
        for name, gid in GENRES_CACHE.items():
            if str(gid) == genre_id:
                genre_name = name.capitalize()
                break
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∂–∞–Ω—Ä ID: {genre_id} ({genre_name})")
        await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω –∂–∞–Ω—Ä: {genre_name}")

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ–¥
    await query.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=ReplyKeyboardRemove()) # –£–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ –≤—Ä–µ–º—è –¥–∏–∞–ª–æ–≥–∞
    return ASK_YEAR


async def ask_year_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_input = update.message.text.lower()
    criteria = context.user_data[DISCOVERY_CRITERIA]

    if user_input == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤—ã–±–æ—Ä –≥–æ–¥–∞.")
        await update.message.reply_text("–ì–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω.")
    elif user_input.isdigit() and len(user_input) == 4:
        year = int(user_input)
        criteria['primary_release_year'] = year
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≥–æ–¥: {year}")
        await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω –≥–æ–¥: {year}")
    else:
        # –û—Ç—Å—Ç—É–ø —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 4 —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023) –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=ReplyKeyboardRemove())
        return ASK_YEAR # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    keyboard = [
        [
            InlineKeyboardButton("–õ—é–±–æ–π", callback_data="rating_any"),
            InlineKeyboardButton("6+", callback_data="rating_6"),
            InlineKeyboardButton("7+", callback_data="rating_7"),
            InlineKeyboardButton("8+", callback_data="rating_8"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=reply_markup)
    return ASK_RATING

async def ask_rating_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
    query = update.callback_query
    await query.answer()
    callback_data = query.data
    criteria = context.user_data[DISCOVERY_CRITERIA]

    rating_text = "–õ—é–±–æ–π"
    if callback_data == "rating_6":
        criteria['vote_average.gte'] = 6
        rating_text = "6+"
    elif callback_data == "rating_7":
        criteria['vote_average.gte'] = 7
        rating_text = "7+"
    elif callback_data == "rating_8":
        criteria['vote_average.gte'] = 8
        rating_text = "8+"

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_text}")
    await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_text}")

    # --- –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–±–æ—Ä ---
    logger.info(f"–í—ã–ø–æ–ª–Ω—è—é –ø–æ–¥–±–æ—Ä –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {criteria}")
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∑–∞—Ç–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await query.message.reply_text("–ò—â—É —Ñ–∏–ª—å–º—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–≥–æ–ª–æ—Å–æ–≤ > 1000)...", reply_markup=MAIN_REPLY_MARKUP) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
    api_results = tmdb_api.discover_movies(criteria) # –£–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ API

    if api_results and api_results.get('results'):
        context.user_data[PAGINATED_RESULTS] = api_results['results']
        await display_movie_result(update, context, 0) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    elif api_results is None:
         await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_REPLY_MARKUP)
    else:
        await query.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.", reply_markup=MAIN_REPLY_MARKUP)


    # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    if DISCOVERY_CRITERIA in context.user_data:
        del context.user_data[DISCOVERY_CRITERIA]
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤
    if DISCOVERY_CRITERIA in context.user_data:
        del context.user_data[DISCOVERY_CRITERIA]
    if PAGINATED_RESULTS in context.user_data: # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        del context.user_data[PAGINATED_RESULTS]
    if CURRENT_INDEX in context.user_data:
        del context.user_data[CURRENT_INDEX]

    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=MAIN_REPLY_MARKUP
    )
    return ConversationHandler.END

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ ---

# –î–∏–∞–ª–æ–≥ –ø–æ–¥–±–æ—Ä–∞
discover_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("discover", discover_start), MessageHandler(filters.Regex(f"^{BTN_DISCOVER}$"), discover_start)],
    states={
        ASK_GENRE: [CallbackQueryHandler(ask_genre_callback, pattern="^(genre_|skip_genre)")],
        ASK_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_year_input)],
        ASK_RATING: [CallbackQueryHandler(ask_rating_callback, pattern="^rating_")],
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ SHOW_DISCOVERY_RESULTS –Ω–µ –Ω—É–∂–Ω–æ, —Ç.–∫. –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ ask_rating_callback
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
)

# –î–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
search_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex(f"^{BTN_SEARCH}$"), search_button_start)],
    states={
        ASK_SEARCH_QUERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_query_input)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---
pagination_handler = CallbackQueryHandler(handle_pagination, pattern="^(prev_movie_|next_movie_)")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ ---
# –û–Ω–∏ –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑—ã–≤–∞—é—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∫–æ–º–∞–Ω–¥
popular_button_handler = MessageHandler(filters.Regex(f"^{BTN_POPULAR}$"), popular_command)
toprated_button_handler = MessageHandler(filters.Regex(f"^{BTN_TOP_RATED}$"), toprated_command)
upcoming_button_handler = MessageHandler(filters.Regex(f"^{BTN_UPCOMING}$"), upcoming_command)
help_button_handler = MessageHandler(filters.Regex(f"^{BTN_HELP}$"), help_command)
